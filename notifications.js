// notifications.js

const { Server } = require('socket.io');

// –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Map –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è userId –∏ socketId)
const connectedUsers = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
let io;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Socket.IO
const initializeSocket = (server) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å CORS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  io = new Server(server, {
    cors: {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      origin: process.env.NODE_ENV === 'production'
        ? 'https://1337brackets-frontend.vercel.app' // URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ Vercel
        : ['http://localhost:3001', 'http://127.0.0.1:5500'], // –õ–æ–∫–∞–ª—å–Ω—ã–µ URL –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      methods: ['GET', 'POST'],
      credentials: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    },
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  io.on('connection', (socket) => {
    console.log('üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω:', socket.id);

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ userId —Å socketId)
    socket.on('register', (userId) => {
      if (userId) {
        connectedUsers.set(userId, socket.id);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å socket ${socket.id}`);
      } else {
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª userId –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    socket.on('disconnect', () => {
      for (let [userId, socketId] of connectedUsers) {
        if (socketId === socket.id) {
          connectedUsers.delete(userId);
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á—ë–Ω`);
          break;
        }
      }
    });
  });

  return io;
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const sendNotification = (userId, notification) => {
  const socketId = connectedUsers.get(userId);
  if (socketId && io) {
    io.to(socketId).emit('notification', notification);
    console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, notification);
  } else {
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∏–ª–∏ io –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
  }
};

module.exports = { initializeSocket, sendNotification };