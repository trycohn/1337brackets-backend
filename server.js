require('dotenv').config({ path: __dirname + '/.env' });

console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π JWT_SECRET:", process.env.JWT_SECRET);

const express = require('express');
const cors = require('cors');
const pool = require('./db');
const http = require('http');
const { initializeSocket } = require('./notifications'); // –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
const tournamentsRouter = require('./routes/tournaments');

const app = express();
const server = http.createServer(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å notifications
initializeSocket(server);

// Middleware
app.use(express.json());
app.use(cors({
  origin: ['http://localhost:3001', 'http://127.0.0.1:5500'],
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true,
}));

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.get('/testdb', async (req, res) => {
  try {
    const result = await pool.query('SELECT NOW()');
    res.json({ status: 'success', time: result.rows[0].now });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', err);
    res.status(500).json({ status: 'error', message: err.message });
  }
});

// API-–º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/users', require('./routes/users'));
app.use('/api/tournaments', tournamentsRouter);
app.use('/api/teams', require('./routes/teams'));
app.use('/api/tournamentPlayers', require('./routes/tournamentPlayers'));
app.use('/api/matches', require('./routes/matches'));
app.use('/api/statistics', require('./routes/statistics'));
app.use('/api/notifications', require('./routes/notifications'));

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –¥–ª—è /api (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤)
app.use('/api', (req, res) => {
  console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`); // –û—Ç–ª–∞–¥–∫–∞
  res.status(404).json({ error: 'API –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
app.use((req, res) => {
  console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`); // –û—Ç–ª–∞–¥–∫–∞
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
  console.log(`Server running on port ${PORT}`);
  try {
    await pool.query('SELECT NOW()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
  }
});