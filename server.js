// server.js
require('dotenv').config({ path: __dirname + '/.env' });

console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π JWT_SECRET:", process.env.JWT_SECRET);

const express = require('express');
const cors = require('cors');
const pool = require('./db');
const http = require('http');
const { Server } = require('socket.io');
const tournamentsRouter = require('./routes/tournaments');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è socket.io
const io = new Server(server, {
  cors: {
      origin: process.env.NODE_ENV === 'production'
          ? ['https://1337brackets-frontend-9xfz.vercel.app', 'https://1337brackets-frontend.vercel.app']
          : ['http://localhost:3001', 'http://127.0.0.1:5500'],
      methods: ['GET', 'POST'],
      credentials: true,
      allowedHeaders: ['Content-Type', 'Authorization'],
  },
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Vercel
  path: '/socket.io',
  transports: ['websocket', 'polling'],
  allowEIO3: true,
});

// Middleware –¥–ª—è Express
app.use(express.json());
app.use(cors({
    origin: process.env.NODE_ENV === 'production'
        ? ['https://1337brackets-frontend-9xfz.vercel.app', 'https://1337brackets-frontend.vercel.app']
        : ['http://localhost:3001', 'http://127.0.0.1:5500'],
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
    allowedHeaders: ['Content-Type', 'Authorization'],
}));

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ preflight-–∑–∞–ø—Ä–æ—Å–æ–≤ (OPTIONS)
app.options('*', cors({
    origin: process.env.NODE_ENV === 'production'
        ? ['https://1337brackets-frontend-9xfz.vercel.app', 'https://1337brackets-frontend.vercel.app']
        : ['http://localhost:3001', 'http://127.0.0.1:5500'],
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
    allowedHeaders: ['Content-Type', 'Authorization'],
}));

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.get('/testdb', async (req, res) => {
    try {
        const result = await pool.query('SELECT NOW()');
        res.json({ status: 'success', time: result.rows[0].now });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', err);
        res.status(500).json({ status: 'error', message: err.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ favicon.ico –∏ favicon.png
app.get('/favicon.ico', (req, res) => {
    res.status(204).end();
});

app.get('/favicon.png', (req, res) => {
    res.status(204).end();
});

// API-–º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/users', require('./routes/users'));
app.use('/api/tournaments', tournamentsRouter);
app.use('/api/teams', require('./routes/teams'));
app.use('/api/tournamentPlayers', require('./routes/tournamentPlayers'));
app.use('/api/matches', require('./routes/matches'));
app.use('/api/statistics', require('./routes/statistics'));
app.use('/api/notifications', require('./routes/notifications'));

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –¥–ª—è /api (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤)
app.use('/api', (req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: 'API –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
app.use((req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
io.on('connection', (socket) => {
    console.log('üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

    socket.on('register', (userId) => {
        socket.join(userId);
        console.log(`–ö–ª–∏–µ–Ω—Ç ${socket.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    });

    socket.on('disconnect', () => {
        console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º io –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
app.set('io', io);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    try {
        await pool.query('SELECT NOW()');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
});